{"version":3,"file":"chart.cjs","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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"}